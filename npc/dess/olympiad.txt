
function	script	olympiad_get_pts	{
	query_sql("SELECT `pts` FROM `olympiad_stat` WHERE `char_id` = " + getarg(0), .@pts);
	
	return .@pts;
}

//olympiad_set_pts <pts> <char_id> 
function	script	olympiad_set_pts	{
	.@pts = getarg(0);
	.@char_id = getarg(1);
	
	if (.@pts > 0 && .@pts > $@olympiad_pts_max)
		.@pts = $@olympiad_pts_max;
	else if (.@pts < 0 && .@pts < $@olympiad_pts_max * -1)
		.@pts = $@olympiad_pts_max * -1;
	
	if (.@pts > 0)
		mes2charid("You have earned " + .@pts + " points in the Grand Olympiad Games.", .@char_id);	
	else 
		mes2charid("You have lost " + (.@pts * -1) + " points in the Grand Olympiad Games.", .@char_id);

	query_sql("UPDATE `olympiad_stat` SET `pts` = `pts` + " + .@pts + " WHERE `char_id` = " + .@char_id);
	
	return 1;
}

function	script	olympiad_arena_select	{
	for (.@i = 1; .@i <= $@olympiad_arena_count; .@i++) {
		.@p1 = getd("$@olympiad_arena_" + .@i + "_char_id[0]");
		.@p2 = getd("$@olympiad_arena_" + .@i + "_char_id[1]");
		if (getd("$@olympiad_arena_" + .@i + "_state") == 2) {
			.@select$ = (.@select$ + .@i + ". ^FF3D64" + getcharinfo(.@p1, 0) + "^000000" + " - " + "^0033FF" + getcharinfo(.@p2, 0) + "^000000");
		}
		else if (getd("$@olympiad_arena_" + .@i + "_state") == 1) {
			.@select$ = .@select$ + .@i + ". - Waiting for opponents";
		}
		else {
			.@select$ = .@select$ + .@i + ". - Free";
		}
		
		.@select$ = .@select$ + ":";
	}
	
	.@as = select(.@select$);
	
	spec_mode(1);
	warp("arena_" + .@as, 102, 100);
	
	return;
}

-	script	olympiad_handler	-1,{
	end;

OnInit:
	$@olympiad_pts_gain = 20; 						//кол-во птс, получаемых каждый период и при создании персонажа
	$@olympiad_pts_div = 3; 						//делитель птс
	$@olympiad_pts_max = 5;							//максимальное кол-во получаемых\снимаемых птс
	$@olympiad_arena_count = 4;						//количество арен
	$@olympiad_battle_count = 30;					//количество возможных боев в день
	$@olympiad_start_count = 4;						//кол-во участников, необходимых дл€ запуска боев
	$@olympiad_move_time = 30;						//врем€ перед перемещением на арену
	$@olympiad_prepare_time = 60;					//врем€ на подготовку перед боем

	$@olympiad_arena_1_state = 0; 
	$@olympiad_arena_2_state = 0; 
	$@olympiad_arena_3_state = 0; 
	$@olympiad_arena_4_state = 0;
	
	setarray $@olympiad_allowed_classes[0], 4060, 4061, 4062, 4063, 4064, 4065, 4073, 4074, 4075, 4076, 4077, 4078, 4079, 4211, 4212, 4215, 4047, 4049;
	
	$@olympiad_queue = queue();
	queueopt($@olympiad_queue, 1, "olympiad_handler::OnQueueMemberLogout");
	
	initnpctimer;
	bindatcmd("olympiadstat","olympiad_handler::OnOlympiadStat");

	if ($olympiad_period == 0)
		$olympiad_period = 1;
		
	end;

OnQueueMemberLogout:
	if (queuesize($@olympiad_queue))
		queueremove($@olympiad_queue, getcharid(3));
	end;
	
OnTimer5000:
	/*
	if (queuesize($@olympiad_queue)) {
		.@it = queueiterator($@olympiad_queue);
		for (.@char_id = qiget(.@it); qicheck(.@it); .@char_id = qiget(.@it)) {
			if (.@char_id == -1)
				continue;
				
			debugmes("queue char_id: " + .@char_id);
		}
		qiclear(.@it);
	}
	*/
	.@wave = 0;
	.@wave_count = 0;

	if (queuesize($@olympiad_queue) >= $@olympiad_start_count) {
		.@it = queueiterator($@olympiad_queue);
		for (.@char_id = qiget(.@it); qicheck(.@it); .@char_id = qiget(.@it)) {
			if (.@char_id == -1)
				continue;
				
			if (getarraysize(.@wave) < $@olympiad_start_count) {
				.@wave[.@wave_count] = .@char_id;
				.@wave_count++;
			}
			else
				break;
		}
		qiclear(.@it);	
		
		if (getarraysize(.@wave) == $@olympiad_start_count) {

			// shuffle
			for (.@i = 0; .@i < $@olympiad_start_count; .@i++) {
				.@r = rand($@olympiad_start_count);
				
				.@temp_id = .@wave[.@r];
				.@wave[.@r] = .@wave[.@i];
				.@wave[.@i] = .@temp_id;
			}
			
			for (.@i = 0; .@i < $@olympiad_start_count / 2; .@i++) {
				if (getarraysize(.@wave) > 1) {
					for (.@arena_id = 1; .@arena_id <= $@olympiad_arena_count; .@arena_id++) {
						if (getd("$@olympiad_arena_" + .@arena_id + "_state") == 0) {
							setd("$@olympiad_arena_" + .@arena_id + "_char_id[0]", .@wave[0]);
							setd("$@olympiad_arena_" + .@arena_id + "_char_id[1]", .@wave[1]);

							queueremove($@olympiad_queue, .@wave[0]);
							queueremove($@olympiad_queue, .@wave[1]);
							deletearray(.@wave[0], 2);
							
							donpcevent("olympiad_arena#" + .@arena_id + "::OnPrepare");
							break;
						}
					}
				}
			}
		}
	}
	
	initnpctimer;
	end;
	
OnPCLoginEvent:
	if (!olympiad_registered) {
		olympiad_registered = 1;
		query_sql("INSERT IGNORE INTO `olympiad_stat` (`char_id`, `class`, `pts`) VALUES ('" + getcharid(0) + "', '" + Class + "', '" + $@olympiad_pts_gain + "')");
	}
	end;

OnClock0610:
	if ($@olympiad_queue)
		queuedel($@olympiad_queue);
	
	$@olympiad_queue = queue();
	queueopt($@olympiad_queue, 1, "olympiad_handler::OnQueueMemberLogout");
	
	query_sql("UPDATE `olympiad_stat` SET `day_battle_count` = 0");
	query_sql("UPDATE `olympiad_stat` SET `day_wins_in_row` = 0");
	end;

OnClock1800:
	announce " - Sharpen your swords, tighten the stitchings in your armor, and make haste to a Grand Olympiad Manager!  Battles in the Grand Olympiad Games are now taking place! - ", bc_all;
	end;
	
OnClock0000:
	announce " - Much carnage has been left for the cleanup crew of the Olympiad Stadium.  Battles in the Grand Olympiad Games are now over! - ", bc_all;
	end;

OnMinute00:
OnPeriodEnd:
	query_sql("DELETE FROM `char_reg_num_db` WHERE `key` = 'hero'");
	query_sql("DELETE FROM `char_reg_num_db` WHERE `key` = 'olympiad_rewarded'");
	olympiad_resetheroes;
	
	announce " - Period " + $olympiad_period + " of the Grand Olympiad Games has now ended - ", bc_all, "0x00FFFF";
	
	sleep(1500);

	query_sql("UPDATE `olympiad_stat` SET `pts_prev` = `pts`, `battle_count_prev` = `battle_count`, `battle_count` = 0, `win` = 0, `loss` = 0");
	
	sleep(10000);
	
	query_sql("UPDATE `olympiad_stat` SET `pts` = " + $@olympiad_pts_gain);
	
	$olympiad_period++;
	
	announce " - Period " + $olympiad_period + " of the Grand Olympiad Games has started - ", bc_all, "0x00FFFF";
		
	initnpctimer;
	end;
	
OnOlympiadStat:
	query_sql("SELECT `battle_count`, `win`, `loss`, `pts`, `day_battle_count`, `day_wins_in_row` FROM `olympiad_stat` WHERE `char_id` = " + getcharid(0), .@battle_count, .@win, .@loss, .@pts, .@day_battle_count, .@day_wins_in_row);
	
	dispbottom("Your current record for this Grand Olympiad is " + .@battle_count + " match(es), " + .@win + " win(s) and " + .@loss + " defeat(s). You have earned " + .@pts + " Olympiad Point(s).");
	dispbottom("Your current record for today is " + .@day_battle_count + " match(es) and " + .@day_wins_in_row + " win(s) in a row."); 
	end;
}

-	script	olympiad_manager	-1,{
	mes "[" + strnpcinfo(1) + "]";
	mes "фыв";
	next;
	switch (select("View informtaion about Grand Olympiad:Enter queue:Leave queue:Spectate:Olympiad Quests:Receive a reward for previous period:Characters ratings in previous period")) {
		case 1: // View informtaion about Grand Olympiad
			mes "^FF0000Terms of enrolment:^000000";
			mes "1)Grand Olympiad is a tournamen for the title of Hero.";
			mes "2)One Olympiad cycle lasts for one calendar week.";
			mes "3)Should have level 90+, complete third class transfer.";
			next;
			mes "^FF0000Grand Olympiad:^000000";
			mes "1)All the battles are one-to-one.";
			mes "2)Olympiad is held from 6.00 p.m. till 12.00 p.m. (6 hours).";
			mes "3)You can participate in " + $@olympiad_battle_count + " battles per day.";
			mes "4)Opponents with the same points.";
			next;
			mes "^FF0000Grand Olympiad:^000000";
			mes "1)If youТve registered, youТll get a message 2 minutes before it starts.";
			mes "2)After 2 minutes the opponents are teleported to one of four possible stadiums (random).";
			next;
			mes "^FF0000Grand Olympiad:^000000";
			mes "1)When the opponents are teleported to the stadium, they have 1 minute to cast buffs and prepare for the battle.";
			mes "2)You can choose from 5 buffs available.";
			next;
			mes "^FF0000Grand Olympiad:^000000";
			mes "1)When a character is teleported to arena Ќ–, ћ– are fully restored.";
			mes "2)Characters keep their summoned servitors when teleported to arena.";
			next;
			mes "^FF0000Grand Olympiad:^000000";
			mes "1)The battle lasts up to 6 minutes or until one of the opponents dies.";
			next;
			mes "^FF0000Grand Olympiad:^000000";
			mes "1)The winner is the character or the party which have done more damage during the battle.";
			mes "2)If during the battle one of the opponents leaves the game, the second opponent wins.";
			next;
			mes "^FF0000Reward for the battle:^000000";	
			mes "1)The more points a character has, the more points they can lose";
			mes "2)There are 2 main rewards for Grand Olympiad: Hero status for a week.";
			mes "3)Special Olympiad Treasure Boxes";
			next;
			mes "^FF0000Reward for the battle:^000000";
			mes "1)To get a reward, your character need to participate in at least 15 battles during the cycle.";
			mes "2)When Olympiad is over, player gets a place in ranking depending on how many points they have";
			close;
			break;
			
		case 2: // Enter queue
			.@class_allowed = 0;
			
			for (.@i = 0; .@i < getarraysize($@olympiad_allowed_classes); .@i++) {
				if (Class == $@olympiad_allowed_classes[.@i])
					.@class_allowed = 1;
			}
			
			if (!.@class_allowed) {
				mes "[" + strnpcinfo(1) + "]";
				mes "Your class can't participate in Grand Olympiad Games.";
				close;
			}
		
			query_sql("SELECT `day_battle_count` FROM `olympiad_stat` WHERE `char_id` = '" + getcharid(0) + "'", .@day_battle_count);
			if (.@day_battle_count >= $@olympiad_battle_count) {
				mes "[" + strnpcinfo(1) + "]";
				mes "You cannot participate in the Grand Olympiad Games more than " + $@olympiad_battle_count + " times per day.";
				close;
			}
			
			if (queueadd($@olympiad_queue, getcharid(0)) != 1)
				dispbottom("You have been registered in the Grand Olympiad Games waiting list.");
			else
				dispbottom("You have already been registered in a waiting list.");
			break;
		
		case 3: // Leave queue
			if (queueremove($@olympiad_queue, getcharid(0)))
				dispbottom("You are not currently registered on waiting list.");
			else
				dispbottom("You have been removed from the Grand Olympiad Games waiting list.");
			break;
			
		case 4: // Spectate
			olympiad_arena_select();
			break;
			
		case 5: // Olympiad Quests
			mes "[" + strnpcinfo(1) + "]";
			mes "";
			next;
			switch (select("Olympiad Daily Quest - Victories:Olympiad Daily Quest - Matches:Daily Quests Information")) {
				case 1:
					.@day = gettime(8);
					
					if (.@day == olyquest_victories) {
						mes "[" + strnpcinfo(1) + "]";
						mes "You have already completed this task today.";
						close;
					}
					
					.@quest_id = 60500;
					.@quest = questprogress(.@quest_id);
					
					if (.@quest == 1) {
						query_sql("SELECT `day_wins_in_row` FROM `olympiad_stat` WHERE `char_id` = '" + getcharid(0) + "'", .@wins_count);
						
						if (.@wins_count == 0) {
							mes "[" + strnpcinfo(1) + "]";
							mes "You have zero wins. Try to beat anyone in the arena.";	
						}
						else if (.@wins_count >= 10) {
							mes "[" + strnpcinfo(1) + "]";
							mes "You have successfully completed the task: Olympiad 10 Victories.";
							
							olyquest_victories = gettime(8);
							erasequest(.@quest_id);
							
							if (getcharid(2))
								addguildrep(getcharid(2), 20);
								
							// награда за 10 побед.
						}
						else {
							mes "[" + strnpcinfo(1) + "]";
							mes "Wins in a row today: ^FF0000" + .@wins_count + "^000000";
							next;
							
							if (.@wins_count >= 5) {
								mes "[" + strnpcinfo(1) + "]";
								mes "Do you want to receive an award for 5 wins?";
								
								if (select("No:Yes") == 2) {
									mes "You have shown great skill!";
									
									olyquest_victories = gettime(8);
									erasequest(.@quest_id);
											
									if (getcharid(2))
										addguildrep(getcharid(2), 10);
										
									// награда за 5 побед.
								}
							}
							else if (.@wins_count >= 2) {
								mes "[" + strnpcinfo(1) + "]";
								mes "Do you want to receive an award  for 2 wins?";
								
								if (select("No:Yes") == 2) {
									mes "You have shown great skill!";
									
									olyquest_victories = gettime(8);
									erasequest(.@quest_id);
											
									if (getcharid(2))
										addguildrep(getcharid(2), 5);
										
									// награда за 2 победы.
								}
							}
							else {
								mes "[" + strnpcinfo(1) + "]";
								mes "These victories not enough for receiving the award.";
							}
						}
					}
					else {
						setquest(.@quest_id);
						
						mes "[" + strnpcinfo(1) + "]";
						mes "You need to get a 2, 5 or 10 wins.";
						dispbottom("Quest received: Olympiad Daily Quest - Victories.");
					}
					break;
					
				case 2:
					.@day = gettime(8);
					
					if (.@day == olyquest_matches) {
						mes "[" + strnpcinfo(1) + "]";
						mes "You have already completed this task today.";
						close;
					}
					
					.@quest_id = 60501;
					.@quest = questprogress(.@quest_id);
					
					if (.@quest == 1) {
						query_sql("SELECT `day_battle_count` FROM `olympiad_stat` WHERE `char_id` = '" + getcharid(0) + "'", .@battle_count);
						
						if (.@battle_count == 0) {
							mes "[" + strnpcinfo(1) + "]";
							mes "Try to beat anyone. Come back after a few matches!";	
						}
						else if (.@battle_count >= 10) {
							mes "[" + strnpcinfo(1) + "]";
							mes "Well done!";
							
							olyquest_matches = gettime(8);
							erasequest(.@quest_id);
							
							if (getcharid(2))
								addguildrep(getcharid(2), 20);
								
							// награда за 10 боЄв.
						}
						else {
							mes "[" + strnpcinfo(1) + "]";
							mes "You have completed ^FF0000" + .@battle_count + "^000000 match(es) today.";
							next;
							
							if (.@battle_count >= 5) {
								mes "[" + strnpcinfo(1) + "]";
								mes "Do you want to receive an award for 5 matches?";
								
								if (select("No:Yes") == 2) {
									mes "You have shown great skill!";
									
									olyquest_matches = gettime(8);
									erasequest(.@quest_id);
											
									if (getcharid(2))
										addguildrep(getcharid(2), 10);
										
									// награда за 5 боЄв.
								}
							}
							else if (.@battle_count >= 2) {
								mes "[" + strnpcinfo(1) + "]";
								mes "Do you want to receive an award for 2 matches?";
								
								if (select("No:Yes") == 2) {
									mes "You have shown great skill!";
									
									olyquest_matches = gettime(8);
									erasequest(.@quest_id);
											
									if (getcharid(2))
										addguildrep(getcharid(2), 5);
										
									// награда за 2 бо€.
								}
							}
							else {
								mes "[" + strnpcinfo(1) + "]";
								mes "These matches not enough for receiving the award.";
							}
						}
					}
					else {
						setquest(.@quest_id);
						
						mes "[" + strnpcinfo(1) + "]";
						mes "You need to complete a 2, 5 or 10 matches.";
						dispbottom("Quest received: Olympiad Daily Quest - Matches.");
					}
					break;
					
				case 3:
					mes "[" + strnpcinfo(1) + "]";
					mes "";
					break;
			}
			break;
			
		case 6: // Receive a reward for previous period
			if (olympiad_rewarded) {
				mes "[" + strnpcinfo(1) + "]";
				mes "You have already received the award.";
				close;
			}
			
			query_sql("SELECT `battle_count_prev` FROM `olympiad_stat` WHERE `char_id` = '" + getcharid(0) + "'", .@battle_count_prev);
		
			if (.@battle_count_prev < 15) {
				mes "[" + strnpcinfo(1) + "]";
				mes "It is necessary to take part in 15 battles.";
				close;
			}

			query_sql("SELECT `char_id` FROM `olympiad_stat` WHERE `class` = '" + Class + "' ORDER BY `pts_prev` DESC LIMIT 10", .@char_ids);
			
			.@size = getarraysize(.@char_ids);
			
			for (.@i = 0; .@i < .@size; .@i++) {
				.@place = .@i + 1;
				
				if (getcharid(0) == .@char_ids[.@i])
					break;
			}
			
			if (.@place == 1) { // Hero
				// салютик
				
				olympiad_sethero();
				
				// награда за 1 место
				
				mes "[" + strnpcinfo(1) + "]";
				mes "Glory to the heroes!";
			}
			else if (.@place <= 3) {
				// награда за 2-3 место
			
				mes "[" + strnpcinfo(1) + "]";
				mes "Well done!";
			}
			else if (.@place <= 10) {
				// награда за 4-10 место
			
				mes "[" + strnpcinfo(1) + "]";
				mes "Well done!";
			}
			else {
				// награда за 10+ места
				
				mes "[" + strnpcinfo(1) + "]";
				mes "Thank you!";
			}
			break;
			
		case 7: // Characters ratings in previous period
			mes "[" + strnpcinfo(1) + "]";
			mes "Ten best-in-class players";
			mes "Select the class:";
			next;

			for (.@i = 0; .@i < getarraysize($@olympiad_allowed_classes); .@i++)
				.@menu$ += jobname($@olympiad_allowed_classes[.@i]) + ":";

			.@s = select(.@menu$);
			
			next;
			
			query_sql("SELECT `name` FROM `olympiad_stat` LEFT JOIN `char` ON `char`.`char_id` = `olympiad_stat`.`char_id` WHERE `prev_battle_count` > 15 AND `olympiad_stat`.`class` = '" + $@olympiad_allowed_classes[.@s - 1] + "' ORDER BY `pts_prev` DESC LIMIT 10", .@char_names$); 
			
			mes "[" + strnpcinfo(1) + "]";
			
			for (.@i = 0; .@i < 10; .@i++) {
				.@place = .@i + 1;
				.@char_name$ = .@char_names$[.@i] != "" ? .@char_names$[.@i] : "-";
				
				if (.@i == 0)
					mes "^FF0000 " + .@place + ". " + .@char_name$ + "^000000";
				else if (.@i <= 3)
					mes "^0000FF " + .@place + ". " + .@char_name$ + "^000000";
				else
					mes "^000000 " + .@place + ". " + .@char_name$ + "^000000";
			}
			
			//query_sql("SELECT `char_id` FROM `olympiad_stat` WHERE `class` = '" + Class + "' ORDER BY `pts_prev` DESC LIMIT 10", .@char_ids);
			break;
	}
	close;
}

-	script	olympiad_arena	-1,{
	end;
	
OnInit:
	.@arena_id = strnpcinfo(2);
	
	if (.@arena_id) {
		disablenpc("Barricade#" + .@arena_id + "1");
		disablenpc("Barricade#" + .@arena_id + "2");
		disablenpc("Barricade#" + .@arena_id + "3");
		disablenpc("Barricade#" + .@arena_id + "4");
		donpcevent("Arena Buffer#" + .@arena_id + "1::OnDisable");
		donpcevent("Arena Buffer#" + .@arena_id + "2::OnDisable");
	}
	end;

OnPrepare:
	.@arena_id = strnpcinfo(2);
	.@char_id[0] = getd("$@olympiad_arena_" + .@arena_id + "_char_id[0]");
	.@char_id[1] = getd("$@olympiad_arena_" + .@arena_id + "_char_id[1]");

	// ќжидание бо€
	setd("$@olympiad_arena_" + .@arena_id + "_state", 1);
	
	for (.@i = $@olympiad_move_time; .@i > 0; .@i--) {
		if (!ischaronline(.@char_id[0]) && ischaronline(.@char_id[1])) {
			mes2charid("Your opponent made haste with their tail between their legs; the match has been cancelled.", .@char_id[1]);
			//сн€ть птс у 0 игрока
			olympiad_set_pts((olympiad_get_pts(.@char_id[0]) / $@olympiad_pts_div * -1), .@char_id[0]);
			setd("$@olympiad_arena_" + .@arena_id + "_char[0]", 0);
			setd("$@olympiad_arena_" + .@arena_id + "_char[1]", 0);
			end;
		}
		else if (!ischaronline(.@char_id[1]) && ischaronline(.@char_id[0])) {
			mes2charid("Your opponent made haste with their tail between their legs; the match has been cancelled.", .@char_id[0]);
			//сн€ть птс у 1 игрока
			olympiad_set_pts((olympiad_get_pts(.@char_id[1]) / $@olympiad_pts_div * -1), .@char_id[1]);
			setd("$@olympiad_arena_" + .@arena_id + "_char[0]", 0);
			setd("$@olympiad_arena_" + .@arena_id + "_char[1]", 0);
			end;
		}
		else if (!ischaronline(.@char_id[0]) && !ischaronline(.@char_id[1])) {
			//сн€ть птс у обоих
			olympiad_set_pts((olympiad_get_pts(.@char_id[0]) / $@olympiad_pts_div * -1), .@char_id[0]);
			olympiad_set_pts((olympiad_get_pts(.@char_id[1]) / $@olympiad_pts_div * -1), .@char_id[1]);
			setd("$@olympiad_arena_" + .@arena_id + "_char[0]", 0);
			setd("$@olympiad_arena_" + .@arena_id + "_char[1]", 0);
			end;
		}
		
		if (.@i == 60 || .@i == 30 || .@i == 15 || .@i <= 5) {
			mes2charid("You will be moved to the Olympiad Stadium in " + .@i + " second(s).", .@char_id[0]);
			mes2charid("You will be moved to the Olympiad Stadium in " + .@i + " second(s).", .@char_id[1]);
		}
			
		sleep 1000;
	}

	warpchar("arena_" + .@arena_id, 101, 143, .@char_id[0]);
	warpchar("arena_" + .@arena_id, 101, 44, .@char_id[1]);

	// ѕодготовка к бою
	setd("$@olympiad_arena_" + .@arena_id + "_state", 2);
		
	setwall(strnpcinfo(4),98,119,8,6,0,"olympiad_wall_" + .@arena_id + "1");
	setwall(strnpcinfo(4),98,66,8,6,0,"olympiad_wall_" + .@arena_id + "2");
	
	enablenpc("Barricade#" + .@arena_id + "1");
	enablenpc("Barricade#" + .@arena_id + "2");
	enablenpc("Barricade#" + .@arena_id + "3");
	enablenpc("Barricade#" + .@arena_id + "4");
	enablenpc("Arena Buffer#" + .@arena_id + "1");
	enablenpc("Arena Buffer#" + .@arena_id + "2");
	
	healcharid(100, 100, .@char_id[0]);
	healcharid(100, 100, .@char_id[1]);
	
	olympiad_resetdamage(.@char_id[0]);
	olympiad_resetdamage(.@char_id[1]);
	
	.battle_end[.@arena_id] = 0;
	
	for (.@i = $@olympiad_prepare_time; .@i > 0; .@i--) {	
		if (!.battle_end[.@arena_id]) {
			if (.@i == 50 || .@i == 40 || .@i == 30 || .@i == 20 || .@i == 10 || .@i <= 5)
				mapannounce strnpcinfo(4), "The Grand Olympiad match will start in " + .@i + " second(s).", bc_map|bc_npc, 0xffff00;
				
			if (.@i == 10) {
				delwall("olympiad_wall_" + .@arena_id + "1");
				delwall("olympiad_wall_" + .@arena_id + "2");
				
				disablenpc("Barricade#" + .@arena_id + "1");
				disablenpc("Barricade#" + .@arena_id + "2");
				disablenpc("Barricade#" + .@arena_id + "3");
				disablenpc("Barricade#" + .@arena_id + "4");
				donpcevent("Arena Buffer#" + .@arena_id + "1::OnDisable");
				donpcevent("Arena Buffer#" + .@arena_id + "2::OnDisable");
			}
		
			sleep 1000;	
		}
	}
	
	if (!.battle_end[.@arena_id]) {
		mapannounce strnpcinfo(4), "The match has started, fight!", bc_map|bc_npc, 0xffff00;
	
		pvpon(strnpcinfo(4));
		initnpctimer;
	}
	end;
	
OnTimer240000:
	mapannounce strnpcinfo(4), "The game will end in 60 second(s).", bc_map|bc_npc, 0xffff00;
	end;
	
OnTimer270000:
	mapannounce strnpcinfo(4), "The game will end in 30 second(s).", bc_map|bc_npc, 0xffff00;
	end;
	
OnTimer285000:
	mapannounce strnpcinfo(4), "The game will end in 15 second(s).", bc_map|bc_npc, 0xffff00;
	end;
	
OnTimer295000:
	mapannounce strnpcinfo(4), "The game will end in 5 second(s).", bc_map|bc_npc, 0xffff00;
	end;

OnTimer300000:
	callsub(OnBattleEnd, 0);
	end;
	
OnPCLogoutEvent:
OnPCDieEvent:
	if (strcharinfo(3) == strnpcinfo(4)) {
		.@arena_id = strnpcinfo(2);
		
		if (getd("$@olympiad_arena_" + .@arena_id + "_state") == 0)
			end;

		.@char_id[0] = getd("$@olympiad_arena_" + .@arena_id + "_char_id[0]");
		.@char_id[1] = getd("$@olympiad_arena_" + .@arena_id + "_char_id[1]");

		.battle_end[.@arena_id] = 1;
		
		if (getcharid(0) == .@char_id[0])
			callsub(OnBattleEnd, 1);
		else if (getcharid(0) == .@char_id[1])
			callsub(OnBattleEnd, 2);
		else 
			callsub(OnBattleEnd, 0);
	}
	end;
	
OnBattleEnd:
	.@arena_id = strnpcinfo(2);
	.@char_id[0] = getd("$@olympiad_arena_" + .@arena_id + "_char_id[0]");
	.@char_id[1] = getd("$@olympiad_arena_" + .@arena_id + "_char_id[1]");

	pvpoff(strnpcinfo(4));
	stopnpctimer;

	if (getarg(0) == 1) {
		.@win = .@char_id[1];
		.@los = .@char_id[0];
	}
	else if (getarg(0) == 2) {
		.@win = .@char_id[0];
		.@los = .@char_id[1];
	}
	else {
		if (olympiad_getdamage(.@char_id[0]) < olympiad_getdamage(.@char_id[1])) {
			.@win = .@char_id[1];
			.@los = .@char_id[0]; 
		}
		else if (olympiad_getdamage(.@char_id[1]) < olympiad_getdamage(.@char_id[0])) {
			.@win = .@char_id[0];
			.@los = .@char_id[1];
		}
		else {
			.@draw = 1;
		}
	}
	
	if (ischaronline(.@char_id[0]))
		mes2charid("Damage inflicted: " + olympiad_getdamage(.@char_id[0]) + ". Damage received: " + olympiad_getdamage(.@char_id[1]) + ".", .@char_id[0]);
	if (ischaronline(.@char_id[1]))
		mes2charid("Damage inflicted: " + olympiad_getdamage(.@char_id[1]) + ". Damage received: " + olympiad_getdamage(.@char_id[0]) + ".", .@char_id[1]);

	if (.@draw) { //ничь€
		mapannounce strnpcinfo(4), "There is no victor; the match ends in a tie.", bc_map|bc_npc, 0xffff00;
		
		.@char_pts[0] = olympiad_get_pts(.@char_id[0]);
		.@char_pts[1] = olympiad_get_pts(.@char_id[1]);
		
		if (.@char_pts[0] > .@char_pts[1]) 
			.@pts = .@char_pts[1] / $@olympiad_pts_div;
		else
			.@pts = .@char_pts[0] / $@olympiad_pts_div;
		
		olympiad_set_pts(.@pts * -1, .@char_id[0]);
		olympiad_set_pts(.@pts * -1, .@char_id[1]);
		
		query_sql("UPDATE`olympiad_stat` SET `battle_count` = `battle_count` + 1, loss` = `loss` + 1, `day_wins_in_row` = 0 WHERE `char_id` = '" + .@char_id[0] + "'");
		query_sql("UPDATE`olympiad_stat` SET `battle_count` = `battle_count` + 1, loss` = `loss` + 1, `day_wins_in_row` = 0 WHERE `char_id` = '" + .@char_id[1] + "'");
	}
	else {
		query_sql("UPDATE `olympiad_stat` SET `day_battle_count` = `day_battle_count` + 1, `day_wins_in_row` = `day_wins_in_row` + 1 WHERE `char_id` = '" + .@win + "'");	
		query_sql("UPDATE `olympiad_stat` SET `day_battle_count` = `day_battle_count` + 1, `day_wins_in_row` = 0 WHERE `char_id` = '" + .@los + "'");

		mapannounce strnpcinfo(4), "Congratulations " + getcharinfo(.@win, 0) + ", you win the match!", bc_map|bc_npc, 0xffff00;

		.@win_pts = olympiad_get_pts(.@win);
		.@los_pts = olympiad_get_pts(.@los);

		if (.@win_pts > .@los_pts) 
			.@pts = .@los_pts / $@olympiad_pts_div;
		else
			.@pts = .@win_pts / $@olympiad_pts_div;
			
		if (.@pts == 0)
			.@pts = 1;

		olympiad_set_pts(.@pts, .@win);
		olympiad_set_pts(.@pts * -1, .@los);

		query_sql("UPDATE `olympiad_stat` SET `battle_count` = `battle_count` + 1, `win` = `win` + 1 WHERE `char_id` = '" + .@win + "'");
		query_sql("UPDATE `olympiad_stat` SET `battle_count` = `battle_count` + 1, `loss` = `loss` + 1 WHERE `char_id` = '" + .@los + "'");
	}
	
	sleep 500;

	if (ischaronline(.@char_id[0]))
		if (getcharinfo(.@char_id[0], 4) == strnpcinfo(4))
			mes2charid("You will be moved back to town in 10 second(s).", .@char_id[0]);

	if (ischaronline(.@char_id[1]))
		if (getcharinfo(.@char_id[1], 4) == strnpcinfo(4))
			mes2charid("You will be moved back to town in 10 second(s).", .@char_id[1]);

	sleep 10000;

	if (ischaronline(.@char_id[0])) {
		if (getcharinfo(.@char_id[0], 4) == strnpcinfo(4)) {
			healcharid(100, 100, .@char_id[0]);
			warpchar("prontera", 147, 94, .@char_id[0]);
		}
	}
			
	if (ischaronline(.@char_id[1])) {
		if (getcharinfo(.@char_id[1], 4) == strnpcinfo(4)) {
			warpchar("prontera", 147, 94, .@char_id[1]);
			healcharid(100, 100, .@char_id[1]);
		}
	}
	
	setd("$@olympiad_arena_" + .@arena_id + "_char_id[0]", 0);
	setd("$@olympiad_arena_" + .@arena_id + "_char_id[1]", 0);
	setd("$@olympiad_arena_" + .@arena_id + "_state", 0);
	.battle_end[.@arena_id] = 0;
	end;
}

-	script	olympiad_buffer	-1,{
	.@arena_id = atoi(substr(strnpcinfo(2), 0, 0));
	
	.@p1 = getd("$@olympiad_arena_" + .@arena_id + "_char_id[0]");
	.@p2 = getd("$@olympiad_arena_" + .@arena_id + "_char_id[1]");
	setd("$@olympiad_arena_buffer_" + strnpcinfo(2), 1);

	if (getcharid(0) == .@p1 || getcharid(0) == .@p2) {
		mes "[" + strnpcinfo(1) + "]";
		addtimer 100, "Arena Buffer#" + strnpcinfo(2) + "::OnDisable";
		while (.@c < 4) {
			switch(select("Kyrie:Bless:Agi Up:Gloria:Magnificat:Suffragium:Aspersio:Adrenaline:Chemical Protection:Awakening Potion:Kaupe:Kaite:Assumptio:STR Food:VIT Food:INT Food")) {
				if (!getd("$@olympiad_arena_buffer_" + strnpcinfo(2))) close;
					case 1: skilleffect 73,0; sc_start SC_KYRIE,300000,10; break;
					case 2: skilleffect 34,0; sc_start SC_BLESSING,300000,10; break;
					case 3: skilleffect 29,0; sc_start SC_INC_AGI,300000,10; break;
					case 4: skilleffect 75,0; sc_start SC_GLORIA,300000,5; break;
					case 5: skilleffect 74,0; sc_start SC_MAGNIFICAT,60000,3; break;
					case 6: skilleffect 67,0; sc_start SC_SUFFRAGIUM,300000,3; break;
					case 7: skilleffect 68,0; sc_start SC_ASPERSIO,300000,5; break;
					case 8: skilleffect 459,0; sc_start SC_ADRENALINE2,300000,1; break;
					case 9: skilleffect 236,0; sc_start SC_CP_ARMOR,300000,1; break;
					case 10: skilleffect 195,0; sc_start SC_ASPDPOTION1,300000,0; break;
					case 11: skilleffect 464,0; sc_start SC_KAUPE,300000,3; break;
					case 12: skilleffect 465,0; sc_start SC_KAITE,300000,7; break;
					case 13: skilleffect 361,0; sc_start SC_ASSUMPTIO,120000,5; break;
					case 14: skilleffect 195,0; sc_start SC_STRFOOD,300000,10; break;
					case 15: skilleffect 195,0; sc_start SC_VITFOOD,300000,10; break;
					case 16: skilleffect 195,0; sc_start SC_INTFOOD,300000,10; break;
			}
			.@c++;
		}
		close2;
	}
	end;

OnDisable:
	setd("$@olympiad_arena_buffer_" + strnpcinfo(2), 0);
	disablenpc("Arena Buffer#" + strnpcinfo(2));
}

-	script	olympiad_barricade	-1,0,0,{
	end;
}

arena_1	mapflag	zone	Olympiad
arena_2	mapflag	zone	Olympiad
arena_3	mapflag	zone	Olympiad
arena_4	mapflag	zone	Olympiad

prontera,147,97,5	duplicate(olympiad_manager)	Olympiad Manager#1	418

arena_1,101,131,0	duplicate(olympiad_buffer)	Arena Buffer#11	418
arena_1,102,56,4	duplicate(olympiad_buffer)	Arena Buffer#12	418
arena_2,101,131,0	duplicate(olympiad_buffer)	Arena Buffer#21	418
arena_2,102,56,4	duplicate(olympiad_buffer)	Arena Buffer#22	418
arena_3,101,131,0	duplicate(olympiad_buffer)	Arena Buffer#31	418
arena_3,102,56,4	duplicate(olympiad_buffer)	Arena Buffer#32	418
arena_4,101,131,0	duplicate(olympiad_buffer)	Arena Buffer#41	418
arena_4,102,56,4	duplicate(olympiad_buffer)	Arena Buffer#42	418

arena_1,0,0,0	duplicate(olympiad_arena)	olympiad_arena#1	-1
arena_2,0,0,0	duplicate(olympiad_arena)	olympiad_arena#2	-1
arena_3,0,0,0	duplicate(olympiad_arena)	olympiad_arena#3	-1
arena_4,0,0,0	duplicate(olympiad_arena)	olympiad_arena#4	-1

arena_1,100,118,0	duplicate(olympiad_barricade)	Barricade#11	1905
arena_1,103,118,0	duplicate(olympiad_barricade)	Barricade#12	1905
arena_1,103,67,0	duplicate(olympiad_barricade)	Barricade#13	1905
arena_1,100,67,0	duplicate(olympiad_barricade)	Barricade#14	1905
arena_2,100,118,0	duplicate(olympiad_barricade)	Barricade#21	1905
arena_2,103,118,0	duplicate(olympiad_barricade)	Barricade#22	1905
arena_2,103,67,0	duplicate(olympiad_barricade)	Barricade#23	1905
arena_2,100,67,0	duplicate(olympiad_barricade)	Barricade#24	1905
arena_3,100,118,0	duplicate(olympiad_barricade)	Barricade#31	1905
arena_3,103,118,0	duplicate(olympiad_barricade)	Barricade#32	1905
arena_3,103,67,0	duplicate(olympiad_barricade)	Barricade#33	1905
arena_3,100,67,0	duplicate(olympiad_barricade)	Barricade#34	1905
arena_4,100,118,0	duplicate(olympiad_barricade)	Barricade#41	1905
arena_4,103,118,0	duplicate(olympiad_barricade)	Barricade#42	1905
arena_4,103,67,0	duplicate(olympiad_barricade)	Barricade#43	1905
arena_4,100,67,0	duplicate(olympiad_barricade)	Barricade#44	1905
